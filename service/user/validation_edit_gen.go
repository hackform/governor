// Code generated by go generate forge validation v0.3; DO NOT EDIT.

package user

func (r reqUserPut) valid() error {
	if err := validUsername(r.Username); err != nil {
		return err
	}
	if err := validFirstName(r.FirstName); err != nil {
		return err
	}
	if err := validLastName(r.LastName); err != nil {
		return err
	}
	return nil
}

func (r reqUserPutRank) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validRank(r.Add); err != nil {
		return err
	}
	if err := validRank(r.Remove); err != nil {
		return err
	}
	return nil
}

func (r reqAcceptRoleInvitation) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validhasRole(r.Role); err != nil {
		return err
	}
	return nil
}

func (r reqGetRoleInvitations) valid() error {
	if err := validhasRole(r.Role); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	if err := validOffset(r.Offset); err != nil {
		return err
	}
	return nil
}

func (r reqGetUserRoleInvitations) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validAmount(r.Amount); err != nil {
		return err
	}
	if err := validOffset(r.Offset); err != nil {
		return err
	}
	return nil
}

func (r reqDelRoleInvitation) valid() error {
	if err := validhasUserid(r.Userid); err != nil {
		return err
	}
	if err := validhasRole(r.Role); err != nil {
		return err
	}
	return nil
}
