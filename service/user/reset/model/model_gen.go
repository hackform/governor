// Code generated by go generate forge model v0.3; DO NOT EDIT.

package model

import (
	"database/sql"
	"fmt"
	"strings"

	"github.com/lib/pq"
)

const (
	resetModelTableName = "userresets"
)

func resetModelSetup(db *sql.DB) error {
	_, err := db.Exec("CREATE TABLE IF NOT EXISTS userresets (userid VARCHAR(31), kind VARCHAR(255), PRIMARY KEY (userid, kind), code_hash VARCHAR(255) NOT NULL, code_time BIGINT NOT NULL, params VARCHAR(4096));")
	if err != nil {
		return err
	}
	return nil
}

func resetModelInsert(db *sql.DB, m *Model) (int, error) {
	_, err := db.Exec("INSERT INTO userresets (userid, kind, code_hash, code_time, params) VALUES ($1, $2, $3, $4, $5);", m.Userid, m.Kind, m.CodeHash, m.CodeTime, m.Params)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func resetModelInsertBulk(db *sql.DB, models []*Model, allowConflict bool) (int, error) {
	conflictSQL := ""
	if allowConflict {
		conflictSQL = " ON CONFLICT DO NOTHING"
	}
	placeholders := make([]string, 0, len(models))
	args := make([]interface{}, 0, len(models)*5)
	for c, m := range models {
		n := c * 5
		placeholders = append(placeholders, fmt.Sprintf("($%d, $%d, $%d, $%d, $%d)", n+1, n+2, n+3, n+4, n+5))
		args = append(args, m.Userid, m.Kind, m.CodeHash, m.CodeTime, m.Params)
	}
	_, err := db.Exec("INSERT INTO userresets (userid, kind, code_hash, code_time, params) VALUES "+strings.Join(placeholders, ", ")+conflictSQL+";", args...)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func resetModelDelEqUserid(db *sql.DB, userid string) error {
	_, err := db.Exec("DELETE FROM userresets WHERE userid = $1;", userid)
	return err
}

func resetModelGetModelEqUseridEqKind(db *sql.DB, userid string, kind string) (*Model, int, error) {
	m := &Model{}
	if err := db.QueryRow("SELECT userid, kind, code_hash, code_time, params FROM userresets WHERE userid = $1 AND kind = $2;", userid, kind).Scan(&m.Userid, &m.Kind, &m.CodeHash, &m.CodeTime, &m.Params); err != nil {
		if err == sql.ErrNoRows {
			return nil, 2, err
		}
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "42P01": // undefined_table
				return nil, 4, err
			default:
				return nil, 0, err
			}
		}
		return nil, 0, err
	}
	return m, 0, nil
}

func resetModelUpdModelEqUseridEqKind(db *sql.DB, m *Model, userid string, kind string) (int, error) {
	_, err := db.Exec("UPDATE userresets SET (userid, kind, code_hash, code_time, params) = ROW($1, $2, $3, $4, $5) WHERE userid = $6 AND kind = $7;", m.Userid, m.Kind, m.CodeHash, m.CodeTime, m.Params, userid, kind)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func resetModelDelEqUseridEqKind(db *sql.DB, userid string, kind string) error {
	_, err := db.Exec("DELETE FROM userresets WHERE userid = $1 AND kind = $2;", userid, kind)
	return err
}
