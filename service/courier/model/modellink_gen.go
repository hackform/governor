// Code generated by go generate. DO NOT EDIT.
package couriermodel

import (
	"database/sql"
	"github.com/lib/pq"
)

const (
	linkModelTableName = "courierlinks"
)

func linkModelSetup(db *sql.DB) error {
	_, err := db.Exec("CREATE TABLE courierlinks (linkid VARCHAR(64) PRIMARY KEY, url VARCHAR(2048) NOT NULL, creatorid VARCHAR(64) NOT NULL, creation_time BIGINT NOT NULL));")
	return err
}

func linkModelGet(db *sql.DB, key string) (*LinkModel, int, error) {
	m := &LinkModel{}
	if err := db.QueryRow("SELECT linkid, url, creatorid, creation_time FROM courierlinks WHERE linkid = $1;", key).Scan(&m.LinkID, &m.URL, &m.CreatorID, &m.CreationTime); err != nil {
		if err == sql.ErrNoRows {
			return nil, 2, err
		}
		return nil, 0, err
	}
	return m, 0, nil
}

func linkModelInsert(db *sql.DB, m *LinkModel) (int, error) {
	_, err := db.Exec("INSERT INTO courierlinks (linkid, url, creatorid, creation_time) VALUES ($1, $2, $3, $4);", m.LinkID, m.URL, m.CreatorID, m.CreationTime)
	if err != nil {
		if postgresErr, ok := err.(*pq.Error); ok {
			switch postgresErr.Code {
			case "23505": // unique_violation
				return 3, err
			default:
				return 0, err
			}
		}
	}
	return 0, nil
}

func linkModelUpdate(db *sql.DB, m *LinkModel) error {
	_, err := db.Exec("UPDATE courierlinks SET (linkid, url, creatorid, creation_time) = ($1, $2, $3, $4) WHERE linkid = $1;", m.LinkID, m.URL, m.CreatorID, m.CreationTime)
	return err
}

func linkModelDelete(db *sql.DB, m *LinkModel) error {
	_, err := db.Exec("DELETE FROM courierlinks WHERE linkid = $1;", m.LinkID)
	return err
}

func linkModelGetLinkModelOrdCreationTime(db *sql.DB, orderasc bool, limit, offset int) ([]LinkModel, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]LinkModel, 0, limit)
	rows, err := db.Query("SELECT linkid, url, creatorid, creation_time FROM courierlinks ORDER BY creation_time $1 LIMIT $2 OFFSET $3;", order, limit, offset)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := LinkModel{}
		if err := rows.Scan(&m.LinkID, &m.URL, &m.CreatorID, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}

func linkModelGetqLinkEqCreatorIDOrdCreationTime(db *sql.DB, key string, orderasc bool, limit, offset int) ([]qLink, error) {
	order := "DESC"
	if orderasc {
		order = "ASC"
	}
	res := make([]qLink, 0, limit)
	rows, err := db.Query("SELECT linkid, url, creation_time FROM courierlinks WHERE creatorid = $1 ORDER BY creation_time $2 LIMIT $3 OFFSET $4;", key, order, limit, offset)
	if err != nil {
		return nil, err
	}
	defer func() {
		if err := rows.Close(); err != nil {
		}
	}()
	for rows.Next() {
		m := qLink{}
		if err := rows.Scan(&m.LinkID, &m.URL, &m.CreationTime); err != nil {
			return nil, err
		}
		res = append(res, m)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return res, nil
}
