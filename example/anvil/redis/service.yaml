{{ $svc := .Vars.kube.service.name -}}
{{ $svcopts := printf "%s-opts" $svc -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $svc }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $svc }}-internal
spec:
  selector:
    app: {{ $svc }}
  ports:
    - name: redis
      port: 6379
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $svc }}
spec:
  selector:
    app: {{ $svc }}
  ports:
    - name: redis
      port: 6379

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $svc }}
spec:
  selector:
    matchLabels:
      app: {{ $svc }}
  serviceName: {{ $svc }}-internal
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ $svc }}
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: {{ $svc }}
        app.kubernetes.io/version: {{ .Vars.kube.service.image.version }}
        app.kubernetes.io/component: {{ .Vars.kube.labe.component }}
        app.kubernetes.io/part-of: {{ .Vars.kube.label.partof }}
        app.kubernetes.io/managed-by: anvil
    spec:
      serviceAccountName: {{ $svc }}
      initContainers:
        - name: getpass
          image: {{ .Vars.kube.service.init.image.name }}:{{ .Vars.kube.service.init.image.version }}
          command: ['sh']
          args: ['/home/redis/init.sh']
          env:
            - name: CURL_BACKOFF
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: curlbackoff
                  optional: true
            - name: CURL_REAUTH
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: curlreauth
                  optional: true
            - name: VAULT_ADDR
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: vaultaddr
            - name: VAULT_ROLE
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: vaultrole
            - name: VAULT_KUBE_MOUNT
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: vaultkubemount
            - name: KV_MOUNT
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: kvmount
            - name: KV_PATH
              valueFrom:
                configMapKeyRef:
                  name: {{ $svcopts }}
                  key: kvpath
          volumeMounts:
            - name: config-pass
              mountPath: /etc/redispass
            - name: init-scripts
              mountPath: /home/redis
      containers:
        - name: redis
          image: {{ .Vars.kube.service.image.name }}:{{ .Vars.kube.service.image.version }}
          command: ['redis-server']
          args: ['/etc/redis/redis.conf']
          ports:
            - name: redis
              containerPort: 6379
          volumeMounts:
            - name: config
              mountPath: /etc/redis
            - name: config-pass
              mountPath: /etc/redispass
      volumes:
        - name: config-pass
          emptyDir: {}
        - name: init-scripts
          configMap:
            name: {{ $svc }}-init-scripts
        - name: config
          configMap:
            name: {{ $svc }}-config
  volumeClaimTemplates: []
